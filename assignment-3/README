The point of this first project was to generate the basics of the map.

CONTROLS:
    fly:
        f x y // replace x and y with coordinates
    maps:
        n, e, s, w //one letter at a time

gameloop:
    continuously loops waiting for input and generating maps


map_key* world:
    holds all map pointers in a 2d array

move_maps:
    moves through maps n,s,e,w

fly:
    moves through coordinates with f 0 0



map_key:
    This struct holds a 2d array which contains ints to signify which symbol should be printed.
    It also holds the location of the gates and a 2d array for Dijkstras weights which I did not implement yet.

printMap:
    Loops through terrain_type and prints appropriate symbol according to int stored

setGates:
    Randomly chooses a coordinate for each gate then sets it

point:
    this struct is used for the queue

queue_node, queue, queue_init, queue_enqueue, queue_dequeue, queue_length, and queue_is_empty are nothing special and mostly taken from class

expand_with_queue:
    This is the main method responsible for the background generation.
    Essentially this method will pick a number of seeds between 15 and 40 to place on the map. I chose this range because less than 15 seems too basic and over 40 it starts to look messy.
    Each seed is queued up with a random assignment to a background type, then the queue will look at each element and discover nearby spots (up, right, down, and left not diagonals) and immediately set the nodes to the same type as the start node if it has not been changed yet
    Each seed expands out wards making a nicer looking graph than what the block method seemed to look like.

terGen:
    simply initializes queue and calls expand_with_queue.
    Will be used in next project for storing maps

setPaths:
    For the n,s and e,w pairs there will be a random point chosen between the two gates.
    Both gates will go straight out to that point then a connection will be made.
    Nothing crazy in this method just the easy version for now.

placeBuildings:
    Picks a random point.
    if the point is touching a road and is not a road places the building
    Randomly decides if building is placed, probability decreases as you get farther from (0,0)
    For now I only put one letter to represent the houses because the instructions say one or more
    I will expand the size later

mapGen:
    makes the border boulders, sets all of the map negative, then calls all of the functions to make the map

main:
    initialize rand and call functions

